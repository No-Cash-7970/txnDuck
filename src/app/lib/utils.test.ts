import '@testing-library/jest-dom';
import * as fs from "node:fs";
import {
  baseUnitsToDecimal,
  decimalToBaseUnits,
  fileToBytes,
  removeNonNumericalChars
} from './utils';

describe('Utilities Functions', () => {
  describe('decimalToBaseUnits()', () => {

    it('converts whole number with no decimals', () => {
      expect(decimalToBaseUnits('25', 0)).toBe('25');
      expect(decimalToBaseUnits('025', 0)).toBe('25');
      expect(decimalToBaseUnits('250', 0)).toBe('250');
      expect(decimalToBaseUnits(250, 1)).toBe('2500');
      expect(decimalToBaseUnits('25')).toBe('25');
      expect(decimalToBaseUnits(42, 5)).toBe('4200000');
      expect(decimalToBaseUnits('0025', 3)).toBe('25000');
    });

    it('converts small (< 1) numbers', () => {
      expect(decimalToBaseUnits('.5')).toBe('0');
      expect(decimalToBaseUnits('00.001', 1)).toBe('0');
      expect(decimalToBaseUnits('.001', 1)).toBe('0');
      expect(decimalToBaseUnits('.25', 3)).toBe('250');
      expect(decimalToBaseUnits('.025', 3)).toBe('25');
      expect(decimalToBaseUnits('.0025', 3)).toBe('2');
      expect(decimalToBaseUnits('.0025000', 3)).toBe('2');
      expect(decimalToBaseUnits('0.0025', 3)).toBe('2');
    });

    it('converts medium-sized (> 1 and < 10_000_000) numbers', () => {
      expect(decimalToBaseUnits('2.5', 0)).toBe('2');
      expect(decimalToBaseUnits(2.5)).toBe('2');
      expect(decimalToBaseUnits('2.5', 3)).toBe('2500');
      expect(decimalToBaseUnits(2.5)).toBe('2');
      expect(decimalToBaseUnits(123.456, 7)).toBe('1234560000');
    });

    it("converts 0 and empty values to '0' base units", () => {
      expect(decimalToBaseUnits('0', 0)).toBe('0');
      expect(decimalToBaseUnits(0, 0)).toBe('0');
      expect(decimalToBaseUnits('0')).toBe('0');
      expect(decimalToBaseUnits('0', 10)).toBe('0');
      expect(decimalToBaseUnits('0.0', 10)).toBe('0');
      expect(decimalToBaseUnits('', 0)).toBe('0');
      expect(decimalToBaseUnits('')).toBe('0');
      expect(decimalToBaseUnits()).toBe('0');
    });

    it('can convert the output of baseUnitsToDecimal()', () => {
      expect(decimalToBaseUnits(baseUnitsToDecimal('42', 1), 3)).toBe('4200');
      expect(decimalToBaseUnits(baseUnitsToDecimal('420', 1), 3)).toBe('42000');
      expect(decimalToBaseUnits(baseUnitsToDecimal('00021', 10), 3)).toBe('0');
      expect(decimalToBaseUnits(baseUnitsToDecimal(41))).toBe('41');
    });

  });

  describe('baseUnitsToDecimal()', () => {

    it('convert numbers strings of various lengths', () => {
      expect(baseUnitsToDecimal('25', 0)).toBe('25');
      expect(baseUnitsToDecimal('25')).toBe('25');
      expect(baseUnitsToDecimal('250', 0)).toBe('250');
      expect(baseUnitsToDecimal('2500', 1)).toBe('250');
      expect(baseUnitsToDecimal('25000000', 6)).toBe('25');
      expect(baseUnitsToDecimal('250000000', 10)).toBe('0.025');
    });

    it('converts `number` types of various lengths', () => {
      expect(baseUnitsToDecimal(25000, 3)).toBe('25');
      expect(baseUnitsToDecimal(2500, 3)).toBe('2.5');
      expect(baseUnitsToDecimal(250, 3)).toBe('0.25');
      expect(baseUnitsToDecimal(25, 3)).toBe('0.025');
      expect(baseUnitsToDecimal(2, 3)).toBe('0.002');
      expect(baseUnitsToDecimal(4200000, 5)).toBe('42');
    });

    it('converts numbers with leading zeros', () => {
      expect(baseUnitsToDecimal('025', 0)).toBe('25');
      expect(baseUnitsToDecimal('00001', 1)).toBe('0.1');
      expect(baseUnitsToDecimal('001', 1)).toBe('0.1');
      expect(baseUnitsToDecimal('0010000', 2)).toBe('100');
    });

    it("converts 0 and empty values to '0'", () => {
      expect(baseUnitsToDecimal(0, 0)).toBe('0');
      expect(baseUnitsToDecimal('0')).toBe('0');
      expect(baseUnitsToDecimal('0', 10)).toBe('0');
      expect(baseUnitsToDecimal('00', 10)).toBe('0');
      expect(baseUnitsToDecimal('', 0)).toBe('0');
      expect(baseUnitsToDecimal('')).toBe('0');
    });

    it('converts `number` types of various lengths', () => {
      expect(baseUnitsToDecimal(25000, 3)).toBe('25');
      expect(baseUnitsToDecimal(2500, 3)).toBe('2.5');
      expect(baseUnitsToDecimal(250, 3)).toBe('0.25');
      expect(baseUnitsToDecimal(25, 3)).toBe('0.025');
      expect(baseUnitsToDecimal(2, 3)).toBe('0.002');
      expect(baseUnitsToDecimal(4200000, 5)).toBe('42');
    });

    it('can convert the output of decimalToBaseUnits()', () => {
      expect(baseUnitsToDecimal(decimalToBaseUnits('25', 3), 3)).toBe('25');
      expect(baseUnitsToDecimal(decimalToBaseUnits('.25', 3), 3)).toBe('0.25');
      expect(baseUnitsToDecimal(decimalToBaseUnits('0.025'))).toBe('0');
      expect(baseUnitsToDecimal(decimalToBaseUnits(4.2, 1), 3)).toBe('0.042');
    });

  });

  describe('removeNonNumericalChars()', () => {

    it('removes whitespace', () => {
      expect(removeNonNumericalChars('12 34\t5')).toBe('12345');
    });

    it('removes letters', () => {
      expect(removeNonNumericalChars('12hr34min5sec')).toBe('12345');
    });

    it('removes punctuation', () => {
      expect(removeNonNumericalChars('($12.34+5)')).toBe('12345');
    });

    it('removes non-ASCII characters', () => {
      expect(removeNonNumericalChars('Â©123ðŸ¦†45Â°)')).toBe('12345');
    });

    it('does not remove any characters if all characters in given string are numbers', () => {
      expect(removeNonNumericalChars('12345')).toBe('12345');
    });

    it('removes all characters if given string has no numbers', () => {
      expect(removeNonNumericalChars('foobar')).toBe('');
    });

    it('returns empty string if given empty string', () => {
      expect(removeNonNumericalChars('')).toBe('');
    });

  });

  describe('fileToBytes()', () => {
    it('converts file contents to bytes', async () => {
      const data = fs.readFileSync('src/app/lib/testing/duck_poem.txt');
      const file = new File([data], 'duck_poem.txt', { type: 'text/plain' });
      expect((await fileToBytes(file)).toString()).toBe(
        // eslint-disable-next-line max-len
        '84,104,101,32,68,117,99,107,32,84,104,97,116,32,76,111,115,116,32,72,105,115,32,81,117,97,99,107,10,10,65,32,68,117,99,107,32,119,111,107,101,32,117,112,32,108,97,116,101,32,111,110,101,32,100,97,121,32,108,97,115,116,32,119,101,101,107,44,10,65,110,100,32,97,108,108,32,104,101,32,99,111,117,108,100,32,100,111,32,119,97,115,32,116,111,32,115,113,117,101,97,107,46,10,72,101,32,108,111,111,107,101,100,32,101,118,101,114,121,119,104,101,114,101,32,97,110,100,32,108,105,115,116,101,110,101,100,32,116,111,32,100,105,102,102,101,114,101,110,116,32,116,104,105,110,103,115,44,10,69,118,101,110,32,104,101,97,114,100,32,115,111,117,110,100,115,32,97,108,108,32,97,114,111,117,110,100,44,32,102,114,111,109,32,112,105,110,103,115,32,116,111,32,122,105,110,103,115,46,10,10,70,111,114,32,101,120,97,109,112,108,101,44,32,104,101,32,116,114,105,101,100,32,109,97,110,121,32,103,97,116,101,115,44,32,115,116,97,105,114,115,44,32,97,110,100,32,98,97,114,110,32,100,111,111,114,115,44,10,84,104,101,110,32,119,101,110,116,32,97,110,100,32,115,116,101,112,112,101,100,32,111,110,32,99,114,97,99,107,115,32,105,110,32,110,101,97,114,98,121,32,99,114,101,97,107,121,32,102,108,111,111,114,115,46,10,72,101,32,118,105,115,105,116,101,100,32,115,101,118,101,114,97,108,32,119,105,116,99,104,101,115,44,32,100,111,99,116,111,114,115,32,97,110,100,32,115,111,109,101,32,119,101,114,101,32,98,111,116,104,44,10,84,104,101,121,32,112,114,101,115,99,114,105,98,101,100,32,101,118,101,114,121,116,104,105,110,103,32,102,114,111,109,32,108,101,109,111,110,115,32,116,111,32,103,105,110,103,101,114,32,116,114,111,116,104,46,10,10,73,110,32,104,105,115,32,116,114,97,118,101,108,115,44,32,104,101,32,99,97,109,101,32,97,99,114,111,115,115,32,97,32,113,117,97,105,110,116,32,119,111,111,100,115,104,111,112,44,10,66,101,105,110,103,32,115,111,32,116,105,114,101,100,44,32,104,101,32,115,97,116,32,100,111,119,110,32,119,105,116,104,32,97,32,115,111,108,105,100,32,112,108,111,112,46,10,65,32,99,97,114,112,101,110,116,101,114,32,115,97,119,32,116,104,97,116,32,116,104,101,32,68,117,99,107,32,119,97,115,32,115,111,32,118,101,114,121,32,115,97,100,44,10,70,114,111,109,32,98,101,104,105,110,100,32,116,104,101,32,99,111,117,110,116,101,114,44,32,104,101,32,99,97,109,101,32,116,111,32,104,101,108,112,32,116,104,101,32,108,97,100,46,10,10,65,102,116,101,114,32,104,101,97,114,105,110,103,32,111,102,32,116,104,101,32,116,97,108,101,32,111,102,32,97,32,109,105,115,115,105,110,103,32,115,111,117,110,100,44,10,84,104,101,32,99,97,114,112,101,110,116,101,114,32,108,101,97,112,116,32,117,112,32,119,105,116,104,32,97,32,100,111,117,98,108,101,32,98,111,117,110,100,46,10,72,101,32,115,97,105,100,44,32,226,128,156,70,114,111,109,32,119,105,116,104,105,110,32,105,115,32,119,104,101,114,101,32,105,116,32,99,111,109,101,115,44,10,78,111,116,32,111,117,116,115,105,100,101,44,32,97,115,32,109,111,115,116,32,119,111,117,108,100,32,115,117,109,46,226,128,157,10,10,226,128,156,73,32,104,97,118,101,32,109,97,100,101,32,109,97,110,121,32,105,110,115,116,114,117,109,101,110,116,115,32,102,111,114,32,109,117,115,105,99,44,10,65,110,100,32,119,104,97,116,32,121,111,117,32,110,101,101,100,32,105,115,32,115,111,109,101,116,104,105,110,103,32,97,99,111,117,115,116,105,99,46,226,128,157,10,72,101,32,98,114,111,117,103,104,116,32,111,117,116,32,97,32,115,104,111,114,116,32,98,111,97,114,100,32,119,105,116,104,32,97,32,110,97,105,108,44,10,84,104,101,110,32,97,116,116,97,99,104,101,100,32,115,101,118,101,114,97,108,32,109,101,116,97,108,32,115,116,114,105,110,103,115,32,116,111,32,97,32,112,97,105,108,46,10,10,84,104,101,32,99,97,114,112,101,110,116,101,114,32,115,97,105,100,44,32,226,128,156,80,108,97,121,32,97,119,97,121,32,97,110,100,32,108,105,115,116,101,110,32,116,111,32,116,104,101,32,115,111,117,110,100,115,32,105,110,32,121,111,117,114,32,104,101,97,100,46,226,128,157,10,84,104,101,32,68,117,99,107,32,115,116,114,117,109,109,101,100,32,101,118,101,114,121,116,104,105,110,103,32,102,114,111,109,32,69,110,121,97,32,116,111,32,116,104,101,32,71,114,97,116,101,102,117,108,32,68,101,97,100,46,10,65,102,116,101,114,32,97,32,102,97,115,104,105,111,110,44,32,116,104,101,32,68,117,99,107,32,119,97,115,32,115,111,111,110,32,108,111,115,116,32,105,110,32,116,104,101,32,116,117,110,101,115,44,10,65,110,100,32,115,116,97,114,116,101,100,32,116,111,32,100,97,110,99,101,32,97,110,100,32,115,105,110,103,32,108,105,107,101,32,97,32,109,105,100,110,105,103,104,116,32,76,117,110,101,46,10,10,87,104,111,32,107,110,101,119,32,116,104,97,116,32,116,104,105,115,32,68,117,99,107,32,104,97,100,32,97,32,107,110,97,99,107,44,10,65,110,100,32,105,110,32,116,104,101,32,109,105,100,100,108,101,32,111,102,32,105,116,32,97,108,108,32,115,116,97,114,116,101,100,32,116,111,32,113,117,97,99,107,46,10,83,111,32,121,111,117,32,115,101,101,44,32,105,116,226,128,153,115,32,110,111,116,32,101,120,116,101,114,110,97,108,32,116,111,32,119,104,97,116,32,121,111,117,32,115,101,101,107,44,10,73,110,32,109,97,110,121,32,99,97,115,101,115,44,32,105,116,115,32,105,110,116,101,114,110,97,108,32,97,110,100,32,119,104,111,32,121,111,117,32,109,101,101,116,46,10,10,10,10,87,114,105,116,116,101,110,32,98,121,32,77,105,99,104,97,101,108,32,69,97,115,116,109,97,110,44,32,56,45,50,53,45,50,48,49,53,44,10,10,84,104,105,115,44,32,97,102,116,101,114,32,108,105,115,116,101,110,105,110,103,32,116,111,32,66,117,98,98,108,101,115,32,116,104,101,32,77,111,117,115,101,32,115,112,101,97,107,44,10,65,110,100,32,104,101,97,114,105,110,103,32,97,32,108,111,110,103,32,115,116,111,114,121,32,99,111,109,112,111,115,101,100,32,111,102,32,115,113,117,101,97,107,115,46,10,10,104,116,116,112,115,58,47,47,119,119,119,46,112,111,101,116,114,121,115,111,117,112,46,99,111,109,47,112,111,101,109,47,116,104,101,95,100,117,99,107,95,116,104,97,116,95,108,111,115,116,95,104,105,115,95,113,117,97,99,107,95,55,48,52,50,57,52,10'
      );
    });
  });

});
